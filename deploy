#!/bin/bash

cd "$(dirname $0)"
verb="$1"
shift

if [ $RELEASE_SERVER -o $TEST_SERVER ]; then
  printf "\e[31mYou should set TEST_SERVER or RELEASE_SERVER \e[m\n"
  exit 1
fi

git fetch --prune
readonly last_deploy_commit_hash="$(git rev-parse master)"
readonly last_develop_commit_hash="$(git rev-parse origin/develop)"
readonly is_production="$([ $RELEASE_SERVER ] && echo true || echo false)"
readonly current_tag=( `git describe --abbrev=0 --tags | tr -s '.' ' '`)

set -e

# =====================================
#   Functions
# =====================================

check-commit-hash() {
  printf "Now production commit hash =>\t${last_deploy_commit_hash}\n"
  if [ $last_develop_commit_hash != $last_deploy_commit_hash ]; then
    printf "\e[33mDetect new develop commit\e[m =>\t${last_develop_commit_hash}\n"
    return 0
  else
    printf 'Not found new develop commit.\n'
    return 1
  fi
}


smart-deploy() {
  deploy_target=$1
  shift

  printf "Now production commit hash\t=> ${last_deploy_commit_hash}\n"

  if [ check-commit-hash ]; then

    if git status | grep --quiet 'working tree clean'; then
      if [ $RELEASE_SERVER ]; then
        git checkout master
        git merge origin/develop
      fi
      
      case "$deploy_target" in
        'all')
          smart-api-deploy $@
          smart-spa-deploy $@
          ;;
        'api')
          smart-api-deploy $@
          ;;
        'spa')
          smart-spa-deploy $@
          ;;
      esac

      if [ $RELEASE_SERVER ]; then
        git push origin master
        add_tag
      fi
      exit 0
    else
      printf "\e[31mExist NOT staged changes or commited some files\e[m\n"
      printf "\e[31;1mAborted!!\e[m\n"
      exit 1
    fi
  
  else
    printf "\e[31;1mAborted!!\e[m\n"
    exit 0
  fi
}

smart-spa-deploy() {
  cd "$(dirname $0)"
  if [ "$1" == "service-host" ]; then
    if git diff --name-only "$last_deploy_commit_hash".."$last_develop_commit_hash" | grep --quiet '^yarn.lock$'; then
      sudo docker-compose build --no-cache spa
    else
      sudo docker-compose build spa
    fi
    sudo docker-compose run --rm spa yarn build
  else
    cd "$(dirname $0)/spa"
    yarn
    yarn build
  fi
}

smart-api-deploy() {
  cd "$(dirname $0)"
  if [ "$1" == "service-host" ]; then
    sudo docker-compose -f docker-compose.production.yml build
    sudo docker-compose -f docker-compose.production.yml restart
    sudo docker-compose -f docker-compose.production.yml ps
  else
    docker-compose -f docker-compose.production.yml build
    docker-compose -f docker-compose.production.yml restart
    docker-compose -f docker-compose.production.yml ps
  fi
}

add_tags() {
  if [ "$1" = "" ]; then
    array=( `git describe --abbrev=0 --tags | tr -s '.' ' '`)
    prev_tag=${array[1]}
    tag=${array[0]}.${array[1]}.$((array[2]+1))
  else
    tag=$1
  fi

  printf "specify tag:\t$tag\n"

  if [ $RELEASE_SERVER ]; then
    git tag $tag
    git push origin $tag || echo $tag
  fi
}

test () {
  echo `add_tags $1`
}

case "$verb" in
  'all' | 'api' | 'spa')
    smart-deploy $verb $@
    ;;
  
  'add_tag')
    add_tags $@
    ;;

  'test')
    test $@
    ;;

  *)
    set +x
    echo
    echo 'Subcommands'
    echo '  all    -- deploy spa and api service'
    echo '  spa    -- deploy spa (js)'
    echo '  api    -- deploy api (rails)'
    echo '  tag    -- add release tag'
    echo ''
    echo 'Environments'
    echo '  RELEASE_SERVER=1  -- You must set this environment variable if you want to stage.'
    echo ''
    echo 'Arguments'
    echo '  service-host  -- You can set argments if you want to deploy on docker service-host.'
    echo '                   Example: `$./deploy <subcommands> service-host`'
    exit 64
esac
